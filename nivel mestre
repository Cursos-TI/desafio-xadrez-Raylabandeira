#include <stdio.h>

// Função recursiva para movimento da Torre
void movimento_torre(int casas, int atual) {
    if (atual > casas) return; // Caso base: todas as casas percorridas
    printf("Direita - Casa %d\n", atual);
    movimento_torre(casas, atual + 1); // Chamada recursiva para próxima casa
}

// Função recursiva para movimento da Rainha
void movimento_rainha(int casas, int atual) {
    if (atual > casas) return; // Caso base: todas as casas percorridas
    printf("Esquerda - Casa %d\n", atual);
    movimento_rainha(casas, atual + 1); // Chamada recursiva para próxima casa
}

// Função recursiva para movimento do Bispo com loops aninhados
void movimento_bispo_recursivo(int atual) {
    if (atual > 5) return; // Caso base: todas as casas percorridas
    printf("Cima, Direita - Casa %d\n", atual);
    movimento_bispo_recursivo(atual + 1); // Chamada recursiva
}

// Função para movimento do Bispo usando loops aninhados
void movimento_bispo_loop() {
    printf("\nMovimento do Bispo (Loops):\n");
    for (int i = 1; i <= 5; i++) { // Movimento vertical
        for (int j = 1; j <= 1; j++) { // Movimento horizontal (simulado)
            printf("Cima, Direita - Casa %d\n", i);
        }
    }
}

// Função para movimento do Cavalo em "L" com loops complexos
void movimento_cavalo() {
    printf("\nMovimento do Cavalo:\n");
    int passo = 0;

    for (int i = 1; i <= 2; i++) { // Duas casas para cima
        printf("Cima - Casa %d\n", ++passo);
        if (i == 2) break; // Parar o loop após duas casas
    }

    for (int j = 1; j <= 1; j++) { // Uma casa para a direita
        if (j % 2 == 0) continue; // Exemplo de controle adicional (não executado aqui)
        printf("Direita - Casa %d\n", ++passo);
    }
}

int main() {
    printf("Movimento da Torre:\n");
    movimento_torre(5, 1); // Chamando função recursiva para Torre

    printf("\nMovimento da Rainha:\n");
    movimento_rainha(8, 1); // Chamando função recursiva para Rainha

    printf("\nMovimento do Bispo:\n");
    movimento_bispo_recursivo(1); // Chamando função recursiva para Bispo

    movimento_bispo_loop(); // Chamando versão do Bispo com loops aninhados

    movimento_cavalo(); // Chamando função do Cavalo com loops complexos

    return 0;
}
